# =============================================================================
# DATABRICKS DIGITAL TWIN - FRONTEND ENVIRONMENT CONFIGURATION
# =============================================================================

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
REACT_APP_BACKEND_URL=http://localhost:8080

# =============================================================================
# DATABRICKS CONFIGURATION
# =============================================================================
# Note: These should match your backend configuration
REACT_APP_DATABRICKS_HOST=https://your-workspace.cloud.databricks.com
REACT_APP_DATABRICKS_TOKEN=dapixxxxxxxx
REACT_APP_DATABRICKS_HTTP_PATH=/sql/1.0/warehouses/your-warehouse-id
REACT_APP_WAREHOUSE_ID=your-warehouse-id

# Database Schema
REACT_APP_DATABRICKS_CATALOG=main
REACT_APP_DATABRICKS_SCHEMA=your_schema
REACT_APP_DATABRICKS_TABLE=bronze

# Advanced Table Configuration
REACT_APP_SYNCED_TABLE_FULL_NAME=main.your_schema.synced_table
REACT_APP_TRIPLE_TABLE_FULL_NAME=main.your_schema.latest_sensor_triples

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================
#
# 1. Copy this file to .env.local:
#    cp .env.example .env.local
#
# 2. Fill in your Databricks workspace details:
#    - REACT_APP_DATABRICKS_HOST: Your workspace URL (e.g., https://e2-workspace.cloud.databricks.com)
#    - REACT_APP_DATABRICKS_TOKEN: Your personal access token
#    - REACT_APP_WAREHOUSE_ID: Your SQL warehouse ID
#
# 3. Configure backend connection:
#    - REACT_APP_BACKEND_URL: Usually http://localhost:8080 for local development
#    - Ensure backend is configured with matching Databricks settings
#
# 4. Update table names to match your setup:
#    - REACT_APP_SYNCED_TABLE_FULL_NAME: Table with latest sensor data
#    - REACT_APP_TRIPLE_TABLE_FULL_NAME: Table with historical RDF triples
#
# 5. Backend Dependencies:
#    - Backend must be configured with Lakebase (PostgreSQL) integration
#    - See serving-app/.env.example for comprehensive backend configuration
#    - Ensure Lakebase is enabled in your Databricks workspace
#
# 6. Start the development server: npm start
#
# NOTE: Frontend connects to backend API, which handles Databricks integration
# including OAuth token management and Lakebase connections.
#
# Expected bronze table schema:
# - component_id: STRING
# - sensor_temperature: DOUBLE  (mapped to sensorAReading)
# - sensor_pressure: DOUBLE     (mapped to sensorBReading)
# - sensor_vibration: DOUBLE    (mapped to sensorCReading)
# - sensor_speed: DOUBLE        (mapped to sensorDReading)
# - timestamp: TIMESTAMP
#
# Alternative schema (also supported):
# - componentID: STRING
# - sensorAReading: DOUBLE
# - sensorBReading: DOUBLE
# - sensorCReading: DOUBLE
# - sensorDReading: DOUBLE
# - timestamp: TIMESTAMP